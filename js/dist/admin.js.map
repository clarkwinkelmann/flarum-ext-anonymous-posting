{"version":3,"file":"admin.js","mappings":"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","sources":["webpack://@clarkwinkelmann/anonymous-posting/webpack/bootstrap","webpack://@clarkwinkelmann/anonymous-posting/webpack/runtime/compat get default export","webpack://@clarkwinkelmann/anonymous-posting/webpack/runtime/define property getters","webpack://@clarkwinkelmann/anonymous-posting/webpack/runtime/hasOwnProperty shorthand","webpack://@clarkwinkelmann/anonymous-posting/webpack/runtime/make namespace object","webpack://@clarkwinkelmann/anonymous-posting/external root \"flarum.core.compat['admin/app']\"","webpack://@clarkwinkelmann/anonymous-posting/external root \"flarum.core.compat['common/components/Button']\"","webpack://@clarkwinkelmann/anonymous-posting/./src/admin/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['admin/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","import app from 'flarum/admin/app';\r\nimport ExtensionPage from 'flarum/admin/components/ExtensionPage';\r\nimport Button from 'flarum/common/components/Button';\r\n\r\nconst avatarsSettingKey = 'anonymous-posting.formulaireAvatars';\r\nconst anonymousUsersSettingKey = 'anonymous-posting.anonymousUsers';\r\nconst translationPrefix = 'clarkwinkelmann-anonymous-posting.admin.settings.';\r\n\r\ninterface Avatar {\r\n    formId: string\r\n    fieldKey: string\r\n    fieldValue: string\r\n    avatarUrl: string\r\n}\r\ninterface AnonymousUser {\r\n    tagName: string\r\n    userId: number\r\n    isCreatingDiscussion: boolean\r\n    isCreatingPost: boolean\r\n    isEnabled: boolean\r\n}\r\n\r\napp.initializers.add('anonymous-posting', () => {\r\n    app.extensionData\r\n        .for('clarkwinkelmann-anonymous-posting')\r\n        .registerSetting({\r\n            setting: 'anonymous-posting.defaultAnonymity',\r\n            label: app.translator.trans(translationPrefix + 'defaultAnonymity'),\r\n            type: 'switch',\r\n        })\r\n        .registerSetting({\r\n            setting: 'anonymous-posting.defaultAnonymityWhenAbleToSwitch',\r\n            type: 'switch',\r\n            label: app.translator.trans(translationPrefix + 'defaultAnonymityWhenAbleToSwitch'),\r\n        })\r\n        .registerSetting({\r\n            setting: 'anonymous-posting.alwaysAnonymiseEdits',\r\n            type: 'switch',\r\n            label: app.translator.trans(translationPrefix + 'alwaysAnonymiseEdits'),\r\n            help: app.translator.trans(translationPrefix + 'alwaysAnonymiseEditsHelp'),\r\n        })\r\n        .registerSetting({\r\n            setting: 'anonymous-posting.composerHelpTextPosition',\r\n            type: 'select',\r\n            options: {\r\n                visible: app.translator.trans(translationPrefix + 'composerHelpTextPositionVisible'),\r\n                tooltip: app.translator.trans(translationPrefix + 'composerHelpTextPositionTooltip'),\r\n                hidden: app.translator.trans(translationPrefix + 'composerHelpTextPositionHidden'),\r\n            },\r\n            default: 'visible',\r\n            label: app.translator.trans(translationPrefix + 'composerHelpTextPosition'),\r\n            help: app.translator.trans(translationPrefix + 'composerHelpTextPositionHelp'),\r\n        })\r\n        .registerSetting({\r\n            setting: 'anonymous-posting.defaultAnonymousUserProfile',\r\n            label: app.translator.trans(translationPrefix + 'defaultAnonymousUserProfile'),\r\n            required: false,\r\n            type: 'number',\r\n            help: app.translator.trans(translationPrefix + 'defaultAnonymousUserProfileHelp'),\r\n        })\r\n        .registerSetting(function (this: ExtensionPage) {\r\n            let anonymousUsers: AnonymousUser[];\r\n\r\n            try {\r\n                anonymousUsers = JSON.parse(this.setting(anonymousUsersSettingKey)());\r\n            } catch (e) {\r\n                // do nothing, we'll reset to something usable\r\n            }\r\n\r\n            // @ts-ignore variable used before assignment, it's fine\r\n            if (!Array.isArray(anonymousUsers)) {\r\n                anonymousUsers = [];\r\n            }\r\n\r\n            return m('.Form-group', [\r\n                m('label', app.translator.trans(translationPrefix + 'anonymousUserProfileByTags')),\r\n                m('.helpText', app.translator.trans(translationPrefix + 'anonymousUserProfileByTagsHelp')),\r\n                m('table', [\r\n                    m('thead', m('tr', [\r\n                        m('th', app.translator.trans(translationPrefix + 'anonymousUserProfileTagName')),\r\n                        m('th', app.translator.trans(translationPrefix + 'anonymousUserProfileUserId')),\r\n                        m('th', app.translator.trans(translationPrefix + 'anonymousUserProfileIsCreatingDiscussion')),\r\n                        m('th', app.translator.trans(translationPrefix + 'anonymousUserProfileIsCreatingPost')),\r\n                        m('th', app.translator.trans(translationPrefix + 'anonymousUserProfileIsEnabled')),\r\n                        m('th'),\r\n                    ])),\r\n                    m('tbody', [\r\n                        anonymousUsers.map((rule, index) => m('tr', [\r\n                            m('td', m('input.FormControl', {\r\n                                type: 'text',\r\n                                value: rule.tagName || '',\r\n                                onchange: (event: InputEvent) => {\r\n                                    rule.tagName = (event.target as HTMLInputElement).value;\r\n                                    this.setting(anonymousUsersSettingKey)(JSON.stringify(anonymousUsers));\r\n                                },\r\n                            })),\r\n                            m('td', m('input.FormControl', {\r\n                                type: 'number',\r\n                                value: rule.userId || '',\r\n                                onchange: (event: InputEvent) => {\r\n                                    rule.userId = (event.target as HTMLInputElement).value;\r\n                                    this.setting(anonymousUsersSettingKey)(JSON.stringify(anonymousUsers));\r\n                                },\r\n                            })),\r\n                            m('td', m('input', {\r\n                                type: 'checkbox',\r\n                                checked: rule.isCreatingDiscussion,\r\n                                onchange: (event: InputEvent) => {\r\n                                    rule.isCreatingDiscussion = (event.target as HTMLInputElement).checked;\r\n                                    this.setting(anonymousUsersSettingKey)(JSON.stringify(anonymousUsers));\r\n                                },\r\n                            })),\r\n                            m('td', m('input', {\r\n                                type: 'checkbox',\r\n                                checked: rule.isCreatingPost,\r\n                                onchange: (event: InputEvent) => {\r\n                                    rule.isCreatingPost = (event.target as HTMLInputElement).checked;\r\n                                    this.setting(anonymousUsersSettingKey)(JSON.stringify(anonymousUsers));\r\n                                },\r\n                            })),\r\n                            m('td', m('input', {\r\n                                type: 'checkbox',\r\n                                checked: rule.isEnabled,\r\n                                onchange: (event: InputEvent) => {\r\n                                    rule.isEnabled = (event.target as HTMLInputElement).checked;\r\n                                    this.setting(anonymousUsersSettingKey)(JSON.stringify(anonymousUsers));\r\n                                },\r\n                            })),\r\n                            m('td', Button.component({\r\n                                className: 'Button Button--icon',\r\n                                icon: 'fas fa-times',\r\n                                onclick: () => {\r\n                                    anonymousUsers.splice(index, 1);\r\n\r\n                                    this.setting(anonymousUsersSettingKey)(anonymousUsers.length > 0 ? JSON.stringify(anonymousUsers) : null);\r\n                                },\r\n                            })),\r\n                        ])),\r\n                        m('tr', m('td', {\r\n                            colspan: 5,\r\n                        }, Button.component({\r\n                            className: 'Button Button--block',\r\n                            onclick: () => {\r\n                                anonymousUsers.push({\r\n                                    tagName: '',\r\n                                    userId: null,\r\n                                    isCreatingDiscussion: false,\r\n                                    isCreatingPost: false,\r\n                                    isEnabled: false,\r\n                                });\r\n\r\n                                this.setting(anonymousUsersSettingKey)(JSON.stringify(anonymousUsers));\r\n                            },\r\n                        }, app.translator.trans(translationPrefix + 'anonymousUserProfileByTagsAdd'))))\r\n                    ]),\r\n                ]),\r\n            ]);\r\n        })\r\n        .registerSetting(function (this: ExtensionPage) {\r\n            let avatars: Avatar[];\r\n\r\n            try {\r\n                avatars = JSON.parse(this.setting(avatarsSettingKey)());\r\n            } catch (e) {\r\n                // do nothing, we'll reset to something usable\r\n            }\r\n\r\n            // @ts-ignore variable used before assignment, it's fine\r\n            if (!Array.isArray(avatars)) {\r\n                avatars = [];\r\n            }\r\n\r\n            return m('.Form-group', [\r\n                m('label', app.translator.trans(translationPrefix + 'avatars')),\r\n                m('.helpText', app.translator.trans(translationPrefix + 'avatarsHelp', {\r\n                    a: m('a', {\r\n                        href: 'https://kilowhat.net/flarum/extensions/formulaire',\r\n                        target: '_blank',\r\n                        rel: 'noopener',\r\n                    }),\r\n                })),\r\n                m('table', [\r\n                    m('thead', m('tr', [\r\n                        m('th', app.translator.trans(translationPrefix + 'avatarFormId')),\r\n                        m('th', app.translator.trans(translationPrefix + 'avatarFieldKey')),\r\n                        m('th', app.translator.trans(translationPrefix + 'avatarFieldValue')),\r\n                        m('th', app.translator.trans(translationPrefix + 'avatarAvatarUrl')),\r\n                        m('th'),\r\n                    ])),\r\n                    m('tbody', [\r\n                        avatars.map((sound, index) => m('tr', [\r\n                            m('td', m('input.FormControl', {\r\n                                type: 'text',\r\n                                value: sound.formId || '',\r\n                                onchange: (event: InputEvent) => {\r\n                                    sound.formId = (event.target as HTMLInputElement).value;\r\n                                    this.setting(avatarsSettingKey)(JSON.stringify(avatars));\r\n                                },\r\n                            })),\r\n                            m('td', m('input.FormControl', {\r\n                                type: 'text',\r\n                                value: sound.fieldKey || '',\r\n                                onchange: (event: InputEvent) => {\r\n                                    sound.fieldKey = (event.target as HTMLInputElement).value;\r\n                                    this.setting(avatarsSettingKey)(JSON.stringify(avatars));\r\n                                },\r\n                            })),\r\n                            m('td', m('input.FormControl', {\r\n                                type: 'text',\r\n                                value: sound.fieldValue || '',\r\n                                onchange: (event: InputEvent) => {\r\n                                    sound.fieldValue = (event.target as HTMLInputElement).value;\r\n                                    this.setting(avatarsSettingKey)(JSON.stringify(avatars));\r\n                                },\r\n                            })),\r\n                            m('td', m('input.FormControl', {\r\n                                type: 'text',\r\n                                value: sound.avatarUrl || '',\r\n                                onchange: (event: InputEvent) => {\r\n                                    sound.avatarUrl = (event.target as HTMLInputElement).value;\r\n                                    this.setting(avatarsSettingKey)(JSON.stringify(avatars));\r\n                                },\r\n                            })),\r\n                            m('td', Button.component({\r\n                                className: 'Button Button--icon',\r\n                                icon: 'fas fa-times',\r\n                                onclick: () => {\r\n                                    avatars.splice(index, 1);\r\n\r\n                                    this.setting(avatarsSettingKey)(avatars.length > 0 ? JSON.stringify(avatars) : null);\r\n                                },\r\n                            })),\r\n                        ])),\r\n                        m('tr', m('td', {\r\n                            colspan: 5,\r\n                        }, Button.component({\r\n                            className: 'Button Button--block',\r\n                            onclick: () => {\r\n                                avatars.push({\r\n                                    formId: '',\r\n                                    fieldKey: '',\r\n                                    fieldValue: '',\r\n                                    avatarUrl: '',\r\n                                });\r\n\r\n                                this.setting(avatarsSettingKey)(JSON.stringify(avatars));\r\n                            },\r\n                        }, app.translator.trans(translationPrefix + 'avatarAdd'))))\r\n                    ]),\r\n                ]),\r\n            ]);\r\n        })\r\n        .registerPermission({\r\n            permission: 'anonymous-posting.use',\r\n            icon: 'fas fa-user-secret',\r\n            label: app.translator.trans('clarkwinkelmann-anonymous-posting.admin.permissions.use'),\r\n        }, 'start')\r\n        .registerPermission({\r\n            permission: 'anonymous-posting.reveal',\r\n            icon: 'fas fa-user-secret',\r\n            label: app.translator.trans('clarkwinkelmann-anonymous-posting.admin.permissions.reveal'),\r\n        }, 'moderate')\r\n        .registerPermission({\r\n            permission: 'anonymous-posting.moderate',\r\n            icon: 'fas fa-user-secret',\r\n            label: app.translator.trans('clarkwinkelmann-anonymous-posting.admin.permissions.moderate'),\r\n        }, 'moderate');\r\n});\r\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","avatarsSettingKey","anonymousUsersSettingKey","translationPrefix","app","registerSetting","setting","label","type","help","options","visible","tooltip","hidden","default","required","anonymousUsers","_this","JSON","parse","this","e","Array","isArray","m","map","rule","index","tagName","onchange","event","target","stringify","userId","checked","isCreatingDiscussion","isCreatingPost","isEnabled","Button","className","icon","onclick","splice","length","colspan","push","avatars","_this2","href","rel","sound","formId","fieldKey","fieldValue","avatarUrl","registerPermission","permission"],"sourceRoot":""}